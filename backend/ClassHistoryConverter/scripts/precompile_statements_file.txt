precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{typeof(Base.lock), Base.TTY})
precompile(Tuple{typeof(Base.unlock), Base.TTY})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, String, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{GenericMemory{:not_atomic, String, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.UUID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Union{Array{String, 1}, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Array{String, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Dict{String, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Pkg.API.instantiate)})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Any})
precompile(Tuple{Base.Experimental.var"#1#2"{Base.Channel{Any}, Task}})
precompile(Tuple{Downloads.Curl.var"#54#62"{Base.Libc.WindowsRawSocket, FileWatching.FDWatcher, Downloads.Curl.Multi}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.SHA1})
precompile(Tuple{Base.var"#816#817"{Downloads.Curl.var"#31#35"{Downloads.Curl.Multi}, Base.Timer}})
precompile(Tuple{Downloads.var"#14#24"{Downloads.Curl.Easy, Downloads.var"#26#29"{Pkg.PlatformEngines.var"#16#17"{Base.IOContext{IO}, Pkg.MiniProgressBars.MiniProgressBar}}}})
precompile(Tuple{typeof(Base.setindex!), GenericMemory{:not_atomic, Union{Base.Libc.RawFD, Base.Libc.WindowsRawSocket, Base.SyncCloseFD, IO}, Core.AddrSpace{Core}(0x00)}, Base.TTY, Int64})
precompile(Tuple{typeof(Base.close), FileWatching.FDWatcher})
precompile(Tuple{Tar.var"##tree_hash#94", String, Bool, typeof(Tar.tree_hash), Function, Base.Process})
precompile(Tuple{typeof(Base.unsafe_read), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, Base.SubString{String}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Any}, Base.SubString{String}})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Tuple{String, String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{Tar.var"#by#40", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{Tar.var"#by#40", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{Base.var"##s128#278", Vararg{Any, 5}})
precompile(Tuple{Tar.var"#hash_tree#39"{SHA.SHA1_CTX}, Base.Dict{String, Any}})
precompile(Tuple{Tar.var"#34#41"{Base.Dict{String, Any}, Tar.var"#by#40"}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{Tar.var"#hash_tree#39"{SHA.SHA1_CTX}, Tuple{String, String}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{Base.var"#893#896"{Base.Process}})
precompile(Tuple{typeof(Base.uv_shutdowncb_task), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.closewrite), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.:(!=)), Base.SHA1, Base.SHA1})
precompile(Tuple{Base.var"##s128#279", Vararg{Any, 5}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:io,), Tuple{Base.IOContext{IO}}}, typeof(Pkg.Registry.update)})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pkg.Registry.RegistrySpec, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{FileWatching.Pidfile.var"##mkpidlock#7", Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:stale_age,), Tuple{Int64}}}, typeof(FileWatching.Pidfile.mkpidlock), Pkg.Registry.var"#75#80"{Base.IOContext{IO}, Dates.Second, Base.Dict{String, Any}, String, Array{Pkg.Registry.RegistryInstance, 1}}, String, Int32})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pkg.Registry.RegistryInstance, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{typeof(Base.hash), Tuple{UInt64}, UInt64})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Union{Array{String, 1}, String}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.hash), Tuple{String}, UInt64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Base.TTY}}, typeof(Base.sprint), Function, Tuple{Pkg.Versions.VersionSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Base.TTY}}, typeof(Base.sprint), Function, Tuple{String}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{String}, Tuple{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Base.TTY}}, typeof(Base.sprint), Function, Tuple{Base.VersionNumber}})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Tuple{UInt32, UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Tuple{UInt32}, Char})
precompile(Tuple{typeof(Base.length), Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), Base.BitArray{1}})
precompile(Tuple{typeof(Base.length), Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Vararg{Base.BitArray{2}}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{Pkg.Resolve.var"#86#88"{Array{Int64, 1}, Base.BitArray{1}}, Base.UnitRange{Int64}}, Pkg.Resolve.var"#85#87"{Array{Base.BitArray{2}, 1}, Array{Int64, 1}, Array{Base.BitArray{1}, 1}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{Pkg.Resolve.var"#86#88"{Array{Int64, 1}, Base.BitArray{1}}, Base.UnitRange{Int64}}, Pkg.Resolve.var"#85#87"{Array{Base.BitArray{2}, 1}, Array{Int64, 1}, Array{Base.BitArray{1}, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}, Vararg{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{UInt32, UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{UInt32}, Char})
precompile(Tuple{Pkg.Operations.var"#47#52"{Bool, Pkg.Types.Context, Tuple{Base.SubString{String}, Base.Dict{Base.UUID, Base.SHA1}}, Base.Channel{Any}, Base.Channel{NamedTuple{(:pkg, :urls, :path), Tuple{Pkg.Types.PackageEntry, Base.Set{String}, String}}}}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pair{String, Bool}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.Filesystem.joinpath)}, Symbol})
precompile(Tuple{Type{NamedTuple{(:force, :recursive), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.something), Nothing, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{typeof(Base.last), Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{typeof(Base.last), Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.Filesystem.joinpath)}, Symbol})
precompile(Tuple{typeof(ArgTools.arg_write), Tar.var"#83#86"{String, Bool, Base.Process, Bool, Tar.var"#1#2"}, Base.DevNull})
precompile(Tuple{Tar.var"##read_tarball#45", Array{UInt8, 1}, Base.DevNull, typeof(Tar.read_tarball), Tar.var"#26#28"{Array{UInt8, 1}, Bool, Bool, Base.Process, String}, Tar.var"#1#2", Base.Process})
precompile(Tuple{Base.Filesystem.var"#_walkdir#35"{Bool, Bool, typeof(throw)}, Base.Channel{Tuple{String, Array{String, 1}, Array{String, 1}}}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Set{String}, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Set{String}, String}, Int64, Int64})
precompile(Tuple{typeof(Pkg.MiniProgressBars.end_progress), Base.IOContext{IO}, Pkg.MiniProgressBars.MiniProgressBar})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Array{String, 1}}, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Base.Dict{String, String}}, Base.Dict{String, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{String, Any}, 1}, Base.Dict{String, Any}})
precompile(Tuple{Pkg.Types.var"#entry!#43"{Pkg.Types.var"#entry!#40#44"}, Base.Dict{String, Any}, String, Base.Dict{String, Union{Array{String, 1}, String}}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Array{Base.Dict{String, Any}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, TOML.Internals.Printer.var"#4#6", Base.ValueIterator{Base.Dict{String, Array{Base.Dict{String, Any}, 1}}}})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, Array{Base.Dict{String, Any}, 1}}}, TOML.Internals.Printer.var"#4#6"}})
precompile(Tuple{typeof(TOML.Internals.Printer.is_array_of_tables), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, TOML.Internals.Printer.var"#5#7"{Base.IdSet{Base.Dict{String, V} where V}}, Base.ValueIterator{Base.Dict{String, Array{Base.Dict{String, Any}, 1}}}})
precompile(Tuple{typeof(Base.any), Base.Generator{Base.ValueIterator{Base.Dict{String, Array{Base.Dict{String, Any}, 1}}}, TOML.Internals.Printer.var"#5#7"{Base.IdSet{Base.Dict{String, V} where V}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :first_block, :sorted, :by, :inline_tables), Tuple{Int64, Bool, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:indent, :first_block, :sorted, :by, :inline_tables), Tuple{Int64, Bool, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(TOML.Internals.Printer.is_tabular), Array{String, 1}})
precompile(Tuple{typeof(TOML.Internals.Printer.is_array_of_tables), Array{String, 1}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Union{Array{String, 1}, String}}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, Union{Array{String, 1}, String}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, TOML.Internals.Printer.var"#4#6", Base.ValueIterator{Base.Dict{String, Union{Array{String, 1}, String}}}})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, Union{Array{String, 1}, String}}}, TOML.Internals.Printer.var"#4#6"}})
precompile(Tuple{TOML.Internals.Printer.var"#4#6", String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :first_block, :sorted, :by, :inline_tables), Tuple{Int64, Bool, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(TOML.Internals.Printer.print_table), Pkg.Types.var"#47#48", Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, TOML.Internals.Printer.var"#4#6", Base.ValueIterator{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, String}}, TOML.Internals.Printer.var"#4#6"}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :first_block, :sorted, :by, :inline_tables), Tuple{Int64, Bool, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(TOML.Internals.Printer.print_table), Pkg.Types.var"#47#48", Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.Dict{String, String}, Array{String, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Dates.DateTime, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(TOML.Internals.Printer.is_array_of_tables), Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(TOML.Internals.Printer.print_table), Nothing, Base.IOStream, Base.Dict{String, Dates.DateTime}, Array{String, 1}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Any, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Char})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Char})
precompile(Tuple{typeof(Base.:(==)), Pkg.Versions.VersionSpec, Base.VersionNumber})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Pkg.Operations.var"#158#165", Base.Order.ForwardOrdering}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{Pkg.Operations.var"#158#165", Base.Order.ForwardOrdering}}}, Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Pkg.MiniProgressBars.start_progress), Base.IOContext{IO}, Pkg.MiniProgressBars.MiniProgressBar})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:internal_call, :strict, :warn_loaded, :timing, :_from_loading, :configs, :io), Tuple{Bool, Bool, Bool, Bool, Bool, Pair{Base.Cmd, Base.CacheFlags}, Base.TTY}}, typeof(Base.Precompilation.precompilepkgs), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Base.Set{Base.PkgId}}, Base.PkgId})
precompile(Tuple{typeof(Base.issubset), Array{Base.PkgId, 1}, Base.Set{Base.PkgId}})
precompile(Tuple{Base.Precompilation.var"#27#67"{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Array{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, 1}}})
precompile(Tuple{typeof(Base.create_expr_cache), Base.PkgId, String, String, String, Array{Pair{Base.PkgId, UInt128}, 1}, Base.Cmd, Base.CacheFlags, IO, IO, Array{Base.PkgId, 1}})
precompile(Tuple{Downloads.Curl.var"#31#35"{Downloads.Curl.Multi}, Base.Timer})
precompile(Tuple{Downloads.Curl.var"#32#36"{Base.Timer, Downloads.Curl.Multi}})
precompile(Tuple{typeof(Base.vect), Base.Dict{String, Any}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Nothing, Base.Dict{String, Any}}}, Base.Dict{String, Any}, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, Base.Dict{String, Any}}, 1}})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, String, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{47, Symbol}})
precompile(Tuple{Type{UInt64}, Int32})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{}, FilePathsBase.var"#10#11"}, Symbol})
precompile(Tuple{Type{NamedTuple{(:signed, :compress), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Symbol})
precompile(Tuple{Type{NamedTuple{(:copycols, :renamecols, :threads), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:copycols, :keeprows, :renamecols), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Base.Fix2{typeof(Base.:(==)), String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Base.Fix2{typeof(Base.:(==)), String}}, Int64, Int64})
precompile(Tuple{typeof(Base.contains), String})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:foreground,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:allrows, :allcols, :rowlabel, :summary, :eltypes, :truncate), T} where T<:Tuple}, Tuple{Bool, Bool, Symbol, Bool, Bool, Int64}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, AbstractArray{T, 1} where T, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{Tables.ByRow{typeof(ClassHistoryConverter.Migrate._break_fez_cell)}, Symbol}})
precompile(Tuple{Type{NamedTuple{(:renamecols, :threads), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.ExtremaMap{typeof(Base.identity)}, Base.BottomRF{typeof(Base._extrema_rf)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base._extrema_rf)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{SentinelArrays.var"#41#42"{Base.ExtremaMap{typeof(Base.identity)}, typeof(Base._extrema_rf)}, Base.BottomRF{typeof(Base._extrema_rf)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{SentinelArrays.var"#39#40"{Base.ExtremaMap{typeof(Base.identity)}, typeof(Base._extrema_rf)}, Base.BottomRF{typeof(Base._extrema_rf)}}, Symbol})
precompile(Tuple{typeof(Base.hash), Tuple{Nothing, Nothing}, UInt64})
precompile(Tuple{typeof(Base._any_tuple), Function, Bool})
precompile(Tuple{Type{NamedTuple{(:on,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:view,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:keep,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{typeof(Base.sum), Symbol}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{String, Int64}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base._all_tuple), Function, Bool})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, String}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.IndexLinear, Base.IndexLinear})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:keep_present,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{UInt64}})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.SubArrayOptimization{Base.Sort.MissingOptimization{Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.MissingOptimization{Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}, Symbol})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Base.rem), UInt128, Type{UInt64}})
precompile(Tuple{Type{NamedTuple{(:unsafe,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.:(<)), Bool, Bool})
precompile(Tuple{Type{Base.Returns{V} where V}, Base.OneTo{Int64}})
precompile(Tuple{typeof(CSV.isvaliddelim), Char})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt8, UInt8}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt8, UInt8}, Int64, Int64})
precompile(Tuple{typeof(CSV.tup), Char})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{22}})
precompile(Tuple{Base.var"##s125#269", Any, Any, Any})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#270#272"{DataType, Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#270#272"{DataType, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Int32, Int64})
precompile(Tuple{Type{NamedTuple{(:transcode,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{typeof(Base.length), Symbol}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DataFrames.TransformationResult, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:keepkeys, :ungroup, :copycols, :keeprows, :renamecols, :threads), T} where T<:Tuple}, NTuple{6, Bool}})
precompile(Tuple{DataFrames.var"#696#697", Function})
precompile(Tuple{Type{BoundsError}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{ClassHistoryConverter.MetricsCalculator.var"#3#5", Symbol}})
precompile(Tuple{typeof(Base.isequal), Symbol, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.GMP.MPZ.add!)}, Symbol})
precompile(Tuple{Type{NamedTuple{(:discard_arbitrary_redundant_rules,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{Tables.ByRow{typeof(ClassHistoryConverter.MetricsCalculator._break_prereq_cell)}, Symbol}})
precompile(Tuple{Base.var"#58#59", Type})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:rev,), Tuple{Bool}}, typeof(DataFrames.order), Symbol})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Number, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Main.main)})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String}})
